initialize() {

    initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy");
    initializeTreeSeq(checkCoalescence=T);

	 //sigma=0.2;
	 //defineConstant("outpath","/Users/cj/Desktop/W50_0.2_.trees");
	 
	 // defineConstant("id",format("%.0f",runif(1,1e6,1e7-1)));
    defineConstant("POP", pop);
    defineConstant("FPATH", fpath);
    defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
    defineConstant("SD", sigma);  // sigma_D, the dispersal distance
    defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
    defineConstant("SM", SI);  // sigma_M, the mate choice distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("W", 50.0);  // width and height of the simulated area
    // defineConstant("G", 1e8);  // genome length
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function

    // initializeMutationType("m1", 0.5, "g", 0.0, 2);
    //initializeGenomicElementType("g1", m1, 1.0);
    //initializeGenomicElement(g1, 0, G-1);
    initializeMutationRate(1e-8);
    initializeRecombinationRate(1e-8);  
    
    //chromosomes
    defineConstant("C", 5000);
    //chromosome length
    defineConstant("GC", 3000);

    initializeMutationType("m1", 0.5, "f", 0.0); // neutral
    // simulating exons, all of which are m1 mutation type
    initializeGenomicElementType("g1", m1, 1.0);
    
    //split genome into chromosomes
     pos=0;
     for(i in 1:C){
        initializeGenomicElement(g1,pos,pos+GC-1);
        pos = pos + GC;
     }


    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

reproduction() {
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
        for (i in seqLen(nOff)) {
            pos = individual.spatialPosition + rnorm(2, 0, SD);
            if (p1.pointInBounds(pos)) {
            	offspring = subpop.addCrossed(individual, mate);
          		offspring.setSpatialPosition(pos);
          	}
        }
    }
    return;
}

1 early() {
    sim.addSubpop("p1", asInteger(K * W * W));
    p1.setSpatialBounds(c(0, 0, W, W));
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform());
    }
    i1.evaluate();
}

early() {
    i1.evaluate(p1);
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));    
    // scale fitness at edges
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	// to be ready for mate choice
   i2.evaluate(p1);
}

1: late() {
    if ((sim.generation % 200) == 0) {
        cat(sim.generation + " " + p1.individualCount);
        catn(" " + clock());
    }
}


500000 late() { 
        sample_ind = sample(p1.individuals,POP);
        // sample_ind.genomes.outputMS(filePath=paste0(c(FPATH,"ms2.txt")),append=F); 
        sample_ind.genomes.outputVCF(filePath=paste0(c(FPATH,"sample.vcf")),append=F);
        writeFile(paste0(c(FPATH,"positions2.txt")),"index x y",append=F);
        for (ind in sample_ind){        
            //ind.genomes.outputMS();
            writeFile(paste0(c(FPATH,"positions2.txt")), 
                 paste(c(ind.index,format("%f",ind.spatialPosition[0:1]))),append=T);
        }
        }
